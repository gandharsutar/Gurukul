Student_Dashboard

import pandas as pd
import streamlit as st 
import matplotlib.pyplot as plt
import plotly.express as px
from datetime import datetime, timedelta
import plotly.graph_objects as go
from streamlit_extras.metric_cards import style_metric_cards

# Set page config
st.set_page_config(
    page_title="Gurukul Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Sample Data
data = {
    'student_id': [1, 2, 3, 4, 5, 6],
    'student_name': ['John', 'Jane', 'Jim', 'Jill', 'Jack', 'Jenny'],
    'subject': ['Math', 'Science', 'English', 'History', 'Geography', 'Art'],
    'time_spent': [45, 60, 30, 50, 40, 35],
    'lessons_done': [2, 3, 1, 4, 2, 3],
    'total_lessons': [10, 10, 10, 10, 10, 10],
    'quiz_scores': [85, 92, 78, 85, 88, 90],
    'next_week_score': [88, 95, 80, 90, 92, 93],
    'attendance': [90, 95, 85, 100, 92, 88]
}
df = pd.DataFrame(data)

# Custom CSS
st.markdown("""
<style>
    /* Main header */
    .main-header {
        text-align: center;
        color: #2c3e50;
        padding: 1rem;
        margin-bottom: 2rem;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* Card styling */
    .card {
        padding: 1.5rem;
        border-radius: 10px;
        background-color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 1.5rem;
    }
    
    /* Sidebar styling */
    [data-testid="stSidebar"] {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    /* Calendar event cards */
    .event-card {
        padding: 0.75rem;
        margin: 0.5rem 0;
        border-radius: 8px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    /* Subject color mapping */
    .Math { color: #3498db; }
    .Science { color: #2ecc71; }
    .English { color: #e74c3c; }
    .History { color: #9b59b6; }
    .Geography { color: #f39c12; }
    .Art { color: #1abc9c; }
</style>
""", unsafe_allow_html=True)

# Main title at the top of the page
st.markdown("<div class='main-header'><h1>GURUKUL STUDENT DASHBOARD</h1></div>", unsafe_allow_html=True)

# Sidebar - Calendar and Events
with st.sidebar:
    st.markdown("## üìÖ Calendar & Events")
    
    # Date selection
    selected_date = st.date_input("Select Date", datetime.now())
    
    # Event type dropdown
    event_type = st.selectbox(
        "Filter Events",
        ["All Events", "Classes", "Assignments", "Exams", "Extracurricular"],
        index=0
    )
    
    # Sample calendar events data
    calendar_events = {
        "Classes": [
            {"date": datetime.now().date(), "title": "Math Class", "time": "09:00 AM - 10:30 AM", "location": "Room 101"},
            {"date": datetime.now().date() + timedelta(days=1), "title": "Science Lab", "time": "11:00 AM - 12:30 PM", "location": "Lab 2"},
            {"date": datetime.now().date() + timedelta(days=2), "title": "English Literature", "time": "02:00 PM - 03:30 PM", "location": "Room 203"}
        ],
        "Assignments": [
            {"date": datetime.now().date(), "title": "Math Homework", "time": "Due 11:59 PM", "description": "Chapter 5 Problems"},
            {"date": datetime.now().date() + timedelta(days=3), "title": "Science Project", "time": "Due 11:59 PM", "description": "Solar System Model"}
        ],
        "Exams": [
            {"date": datetime.now().date() + timedelta(days=5), "title": "Math Quiz", "time": "10:00 AM - 11:00 AM", "topics": "Algebra Basics"},
            {"date": datetime.now().date() + timedelta(days=7), "title": "Final Exam", "time": "09:00 AM - 12:00 PM", "topics": "All Subjects"}
        ],
        "Extracurricular": [
            {"date": datetime.now().date() + timedelta(days=2), "title": "Chess Club", "time": "04:00 PM - 05:30 PM", "location": "Library"},
            {"date": datetime.now().date() + timedelta(days=4), "title": "Debate Team", "time": "03:00 PM - 04:30 PM", "location": "Auditorium"}
        ]
    }
    
    # Display events based on selection
    st.markdown("### üéØ Today's Events")
    
    # Filter events by date and type
    filtered_events = []
    if event_type == "All Events":
        for category in calendar_events:
            for event in calendar_events[category]:
                if event["date"] == selected_date:
                    filtered_events.append({"category": category, **event})
    else:
        for event in calendar_events.get(event_type, []):
            if event["date"] == selected_date:
                filtered_events.append({"category": event_type, **event})
    
    # Display filtered events
    if filtered_events:
        for event in filtered_events:
            with st.container():
                st.markdown(f"<div class='event-card'><b>{event['title']}</b><br>"
                            f"‚è∞ {event['time']}<br>"
                            f"üìå {event.get('location', event.get('description', event.get('topics', 'No details')))}<br>"
                            f"<small>Category: {event['category']}</small></div>", 
                            unsafe_allow_html=True)
    else:
        st.info("No events scheduled for selected date.")

# Main dashboard content
# Row 1: Key Metrics
st.markdown("## üìä Performance Overview")
col1, col2, col3, col4 = st.columns(4)

with col1:
    avg_score = df['quiz_scores'].mean()
    st.metric(label="Average Score", value=f"{avg_score:.1f}%", delta=f"{(avg_score - 80):.1f}% vs target")
    
with col2:
    avg_time = df['time_spent'].mean()
    st.metric(label="Avg Study Time", value=f"{avg_time:.0f} mins", delta="+5 mins from last week")
    
with col3:
    completion_rate = (df['lessons_done'].sum() / df['total_lessons'].sum()) * 100
    st.metric(label="Lesson Completion", value=f"{completion_rate:.1f}%", delta="+8% from last week")
    
with col4:
    avg_attendance = df['attendance'].mean()
    st.metric(label="Avg Attendance", value=f"{avg_attendance:.1f}%", delta="2% improvement")

style_metric_cards()

# Row 2: Main Charts
st.markdown("## üìà Performance Analysis")
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("### Time Spent vs Scores")
    fig = px.scatter(df, x='time_spent', y='quiz_scores', color='subject',
                     size='lessons_done', hover_name='student_name',
                     trendline="lowess",
                     labels={'time_spent': 'Time Spent (minutes)', 'quiz_scores': 'Quiz Scores (%)'},
                     title='Study Time vs Performance')
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

with col2:
    st.markdown("### Subject Distribution")
    subject_time = df.groupby('subject')['time_spent'].sum().reset_index()
    fig = px.pie(subject_time, values='time_spent', names='subject', 
                 hole=0.4, color='subject',
                 color_discrete_map={
                     'Math': '#3498db',
                     'Science': '#2ecc71',
                     'English': '#e74c3c',
                     'History': '#9b59b6',
                     'Geography': '#f39c12',
                     'Art': '#1abc9c'
                 })
    fig.update_traces(textposition='inside', textinfo='percent+label')
    fig.update_layout(height=400, showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

# Row 3: Detailed Charts
st.markdown("## üìö Detailed Performance Metrics")
tab1, tab2, tab3 = st.tabs(["Time Analysis", "Progress Tracking", "Score Distribution"])

with tab1:
    st.markdown("### Time Spent on Subjects")
    fig = px.bar(df, x='subject', y='time_spent', color='subject',
                 text='time_spent',
                 labels={'time_spent': 'Time Spent (minutes)', 'subject': 'Subject'},
                 color_discrete_map={
                     'Math': '#3498db',
                     'Science': '#2ecc71',
                     'English': '#e74c3c',
                     'History': '#9b59b6',
                     'Geography': '#f39c12',
                     'Art': '#1abc9c'
                 })
    fig.update_traces(texttemplate='%{text} min', textposition='outside')
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.markdown("### Lesson Progress")
    df_progress = df.copy()
    df_progress['progress'] = (df_progress['lessons_done'] / df_progress['total_lessons']) * 100
    fig = px.bar(df_progress, x='student_name', y='progress', color='subject',
                 text='progress',
                 labels={'progress': 'Progress (%)', 'student_name': 'Student'},
                 title='Lesson Completion by Student')
    fig.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.markdown("### Score Distribution")
    fig = px.box(df, y='quiz_scores', points="all", hover_name='student_name',
                 labels={'quiz_scores': 'Quiz Scores (%)'},
                 title='Score Distribution Across Students')
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

# Row 4: Student Details
df=df.set_index('student_id')
st.markdown("## üë®‚Äçüéì Student Performance Details")
st.dataframe(df.style
             .format({'quiz_scores': '{:.0f}%', 'attendance': '{:.0f}%'})
             .set_properties(**{'font-size': '12pt'}),
             height=300,
             column_config={
                 "student_id": "ID",
                 "student_name": "Name",
                 "subject": "Subject",
                 "time_spent": st.column_config.NumberColumn("Time (mins)", format="%.0f min"),
                 "quiz_scores": st.column_config.NumberColumn("Score", format="%.0f"),
                 "attendance": st.column_config.NumberColumn("Attendance", format="%.0f%%")
             })